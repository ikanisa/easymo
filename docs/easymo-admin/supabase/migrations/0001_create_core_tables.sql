-- Example initial migration for the `easymo-admin` Supabase project.
-- The statements assume a blank project with default auth schema enabled.
-- Review each section before running `supabase db push` to ensure that
-- naming conventions and access policies align with your security posture.

begin;

-- Extensions ---------------------------------------------------------------
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists pgcrypto with schema extensions;
create extension if not exists citext with schema extensions;

-- Schemas -----------------------------------------------------------------
create schema if not exists app;

-- Tables ------------------------------------------------------------------
create table if not exists app.organizations (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  slug citext not null unique,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists app.user_profiles (
  id uuid primary key references auth.users on delete cascade,
  organization_id uuid references app.organizations(id) on delete set null,
  email citext not null unique,
  full_name text,
  avatar_url text,
  onboarded_at timestamptz,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists app.audit_logs (
  id bigint generated by default as identity primary key,
  actor_id uuid references auth.users on delete set null,
  organization_id uuid references app.organizations(id) on delete cascade,
  action text not null,
  metadata jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default timezone('utc', now())
);

-- Triggers ----------------------------------------------------------------
create or replace function app.touch_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at := timezone('utc', now());
  return new;
end;
$$;

do $$
declare
  _tbl regclass;
begin
  foreach _tbl in array array['app.organizations', 'app.user_profiles'] loop
    execute format('drop trigger if exists set_updated_at on %s;', _tbl);
    execute format('
      create trigger set_updated_at
      before update on %s
      for each row
      execute function app.touch_updated_at();
    ', _tbl);
  end loop;
end;
$$;

-- Row Level Security ------------------------------------------------------
alter table app.organizations enable row level security;
alter table app.user_profiles enable row level security;
alter table app.audit_logs enable row level security;

create policy "Users can view their profile"
  on app.user_profiles
  for select
  using (auth.uid() = id);

create policy "Service role can manage all profiles"
  on app.user_profiles
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

create policy "Users can view organization metadata"
  on app.organizations
  for select
  using (exists (
    select 1
    from app.user_profiles up
    where up.organization_id = organizations.id
      and up.id = auth.uid()
  ));

create policy "Service role manages organizations"
  on app.organizations
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

create policy "Service role ingests audit logs"
  on app.audit_logs
  for all
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

-- Indexes -----------------------------------------------------------------
create index if not exists organizations_slug_idx on app.organizations (slug);
create index if not exists user_profiles_email_idx on app.user_profiles (email);
create index if not exists audit_logs_created_at_idx on app.audit_logs (created_at desc);

commit;
