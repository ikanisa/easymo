name: Node CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  packages:
    name: Validate + Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate Prisma schema (packages/db)
        run: pnpm -C packages/db exec prisma validate
      - name: Build packages
        run: |
          pnpm -C packages/shared build
          pnpm -C packages/commons build
          pnpm -C packages/messaging build
          pnpm -C packages/db build

  backend-apps:
    name: Build Backend Apps
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend apps
        run: |
          pnpm -C apps/agent-core build
          pnpm -C apps/voice-bridge build
          pnpm -C apps/sip-webhook build
          pnpm -C apps/api build
      - name: Test backend apps (if present)
        run: |
          pnpm -C apps/agent-core test --if-present
          pnpm -C apps/voice-bridge test --if-present
          pnpm -C apps/sip-webhook test --if-present
          pnpm -C apps/api test --if-present

  admin:
    name: Build + Test Admin App
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package for admin
        run: pnpm -F @va/shared build

      - name: Build admin-app (Next)
        run: pnpm -F @easymo/admin-app build

      - name: Test admin-app
        run: pnpm -F @easymo/admin-app test -- --run

  monorepo-smoke:
    name: Monorepo Build (reduced concurrency)
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Recursive build (workspace-concurrency=1)
        env:
          CI: "1"
        run: pnpm -r build --workspace-concurrency=1

  policy-smoke:
    name: Policy Smoke (staging)
    runs-on: ubuntu-latest
    needs: packages
    env:
      STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
    steps:
      - name: Check staging URL
        run: |
          if [ -z "${STAGING_DATABASE_URL}" ]; then
            echo "No staging DB URL; skipping policy smoke."; exit 0;
          fi
      - name: Install psql
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Verify RLS (read only)
        run: |
          if [ -z "${STAGING_DATABASE_URL}" ]; then exit 0; fi
          psql "$STAGING_DATABASE_URL" -c 'SELECT 1;' -tA

  typecheck:
    name: Typecheck Packages & Apps
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Typecheck shared packages
        run: |
          pnpm -C packages/shared exec tsc -p tsconfig.json --noEmit
          pnpm -C packages/commons exec tsc -p tsconfig.json --noEmit
          pnpm -C packages/messaging exec tsc -p tsconfig.json --noEmit
          pnpm -C packages/db exec tsc -p tsconfig.json --noEmit

      - name: Typecheck backend apps
        run: |
          pnpm -C apps/agent-core exec tsc -p tsconfig.json --noEmit
          pnpm -C apps/voice-bridge exec tsc -p tsconfig.json --noEmit
          pnpm -C apps/sip-webhook exec tsc -p tsconfig.json --noEmit
          pnpm -C apps/api exec tsc -p tsconfig.json --noEmit

      - name: Typecheck admin-app
        run: pnpm -F @easymo/admin-app run type-check

  lint:
    name: Lint Monorepo
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint
