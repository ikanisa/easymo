name: Supabase Deploy

on:
  workflow_dispatch:
    inputs:
      apply_migrations:
        description: "Apply DB migrations to remote"
        required: false
        default: "true"
      deploy_functions:
        description: "Deploy Edge Functions"
        required: false
        default: "true"
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Supabase (DB + Functions)
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
    steps:
      - name: Check secrets
        run: |
          if [ -z "${SUPABASE_ACCESS_TOKEN}" ] || [ -z "${SUPABASE_PROJECT_REF}" ]; then
            echo "Supabase secrets are missing; set SUPABASE_ACCESS_TOKEN and SUPABASE_PROJECT_REF." >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link project
        run: supabase link --project-ref "$SUPABASE_PROJECT_REF"

      - name: Apply DB migrations (supabase db push)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.apply_migrations == 'true' || github.event_name == 'push' }}
        run: supabase db push

      - name: Deploy Edge Functions
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_functions == 'true' || github.event_name == 'push' }}
        env:
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          base="supabase/functions"
          if [ ! -d "$base" ]; then
            echo "No functions directory found; skipping."; exit 0;
          fi
          for dir in $(find "$base" -maxdepth 1 -mindepth 1 -type d -printf '%f\n' 2>/dev/null || ls -1 "$base"); do
            case "$dir" in
              _shared|tests|node_modules) continue;;
            esac
            echo "Deploying function: $dir"
            supabase functions deploy "$dir" --project-ref "$PROJECT_REF"
          done

