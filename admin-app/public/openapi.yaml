openapi: 3.0.3
info:
  title: Broker AI API
  version: 1.0.0
servers:
  - url: https://easymo.vercel.app
    description: Vercel proxy with path prefixes
paths:
  /api/buyer/intents:
    post:
      summary: Create intent (alias to /buyers/{id}/intents)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                buyerId: { type: string }
                channel: { type: string }
                payload: { type: object }
                expiresAt: { type: string }
      responses:
        '201': { description: Created }
  /api/buyer/purchases/{id}/confirm:
    post:
      summary: Vendor or buyer confirms purchase
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actor: { type: string, enum: [VENDOR, BUYER] }
                amount: { type: number }
                currency: { type: string }
      responses:
        '200': { description: OK }
  /api/vendor/vendors/{id}/quotes:
    post:
      summary: Vendor issues quote for intent
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                intentId: { type: string }
                price: { type: number }
                currency: { type: string }
                etaMinutes: { type: integer }
      responses:
        '201': { description: Created }
  /api/ranking/ranking/vendors:
    get:
      summary: Ranked vendor recommendations
      parameters:
        - in: query
          name: tenantId
          required: true
          schema: { type: string }
        - in: query
          name: categories
          schema: { type: string, description: 'comma-separated' }
        - in: query
          name: region
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/wallet/wallet/transfer:
    post:
      summary: Post double-entry transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                sourceAccountId: { type: string }
                destinationAccountId: { type: string }
                amount: { type: number }
                currency: { type: string }
                reference: { type: string }
      responses:
        '201': { description: Created }
  /api/wa/outbound/messages:
    post:
      summary: Send WhatsApp text or template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to: { type: string }
                text: { type: string }
                template: { type: object }
      responses:
        '202': { description: Accepted }
  /api/recon/reconciliation/mobile-money:
    post:
      summary: Reconcile mobile-money CSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '202': { description: Accepted }
  /api/attrib/attribution/evaluate:
    post:
      summary: Evaluate attribution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quoteId: { type: string }
                referrals: { type: array, items: { type: object } }
                events: { type: array, items: { type: object } }
      responses:
        '200': { description: OK }
