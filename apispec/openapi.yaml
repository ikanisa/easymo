openapi: 3.0.3
info:
  title: Broker AI API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Gateway (future)
  - url: http://localhost:4700
    description: Buyer Service
  - url: http://localhost:4600
    description: Vendor Service
  - url: http://localhost:4500
    description: Ranking Service
  - url: http://localhost:4400
    description: Wallet Service
  - url: http://localhost:4800
    description: WhatsApp Bot
  - url: http://localhost:4900
    description: Attribution Service
  - url: http://localhost:5000
    description: Reconciliation Service
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the conversation.
        object:
          type: string
          description: Object type identifier.
          example: conversation
        created_at:
          type: integer
          format: int64
          description: Unix timestamp of when the conversation was created.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Optional key-value metadata pairs associated with the conversation.
      required: [id, object, created_at]
    ConversationDeleteResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          example: conversation.deleted
        deleted:
          type: boolean
      required: [id, object, deleted]
    ConversationItem:
      type: object
      properties:
        type:
          type: string
          description: Item type indicator, e.g. message.
        id:
          type: string
        status:
          type: string
        role:
          type: string
          description: Role associated with the message item.
        content:
          type: array
          description: Ordered list of content parts in the item.
          items:
            $ref: '#/components/schemas/ConversationItemContentPart'
      required: [type, id]
    ConversationItemContentPart:
      type: object
      properties:
        type:
          type: string
          description: Content part type, e.g. input_text.
        text:
          type: string
          description: Text payload for text content parts.
        image_url:
          type: string
          format: uri
          description: URL of an image for image content parts.
      required: [type]
    ConversationItemList:
      type: object
      properties:
        object:
          type: string
          description: List identifier, usually "list".
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConversationItem'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required: [object, data, has_more]
    ConversationItemCreate:
      type: object
      description: Definition for creating a new conversation item.
      properties:
        type:
          type: string
          description: Type of item to create, typically message.
        role:
          type: string
          description: Role of the author (user, assistant, system, etc.).
        status:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConversationItemContentPart'
      required: [type]
    ConversationCreateRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
        items:
          type: array
          maxItems: 20
          items:
            $ref: '#/components/schemas/ConversationItemCreate'
      additionalProperties: false
    ConversationItemsCreateRequest:
      type: object
      properties:
        items:
          type: array
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/ConversationItemCreate'
      required: [items]
      additionalProperties: false
    ConversationUpdateRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
      required: [metadata]
      additionalProperties: false
paths:
  /intents:
    post:
      summary: Create intent (alias to /buyers/{id}/intents)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                buyerId: { type: string }
                channel: { type: string }
                payload: { type: object }
                expiresAt: { type: string }
      responses:
        '201': { description: Created }
  /purchases/{id}/confirm:
    post:
      summary: Vendor or buyer confirms purchase
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actor: { type: string, enum: [VENDOR, BUYER] }
                amount: { type: number }
                currency: { type: string }
      responses:
        '200': { description: OK }
  /vendors/{id}/quotes:
    post:
      summary: Vendor issues quote for intent
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                intentId: { type: string }
                price: { type: number }
                currency: { type: string }
                etaMinutes: { type: integer }
      responses:
        '201': { description: Created }
  /ranking/vendors:
    get:
      summary: Ranked vendor recommendations
      parameters:
        - in: query
          name: tenantId
          required: true
          schema: { type: string }
        - in: query
          name: categories
          schema: { type: string, description: 'comma-separated' }
        - in: query
          name: region
          schema: { type: string }
      responses:
        '200': { description: OK }
  /ranking/feedback:
    post:
      summary: Update vendor quality metrics from feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                vendorId: { type: string }
                scores: { type: object }
      responses:
        '200': { description: OK }
  /wallet/transfer:
    post:
      summary: Post double-entry transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                sourceAccountId: { type: string }
                destinationAccountId: { type: string }
                amount: { type: number }
                currency: { type: string }
                reference: { type: string }
      responses:
        '201': { description: Created }
  /wallet/accounts/provision:
    post:
      summary: Create or fetch wallet for owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                ownerType: { type: string, enum: [vendor, buyer, platform, commission, agent, endorser] }
                ownerId: { type: string }
                currency: { type: string }
      responses:
        '201': { description: Created }
        '200': { description: Existing }
  /wallet/accounts/lookup:
    get:
      summary: Lookup wallet by owner
      parameters:
        - in: query
          name: tenantId
          schema: { type: string }
        - in: query
          name: ownerType
          required: true
          schema: { type: string }
        - in: query
          name: ownerId
          required: true
          schema: { type: string }
        - in: query
          name: currency
          schema: { type: string }
      responses:
        '200': { description: OK }
  /outbound/messages:
    post:
      summary: Send WhatsApp text or template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to: { type: string }
                text: { type: string }
                template: { type: object }
      responses:
        '202': { description: Accepted }
  /reconciliation/mobile-money:
    post:
      summary: Reconcile mobile-money CSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
      responses:
        '202': { description: Accepted }
  /attribution/evaluate:
    post:
      summary: Evaluate attribution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quoteId: { type: string }
                referrals: { type: array, items: { type: object } }
                events: { type: array, items: { type: object } }
      responses:
        '200': { description: OK }
  /attribution/evidence:
    post:
      summary: Store attribution evidence artifacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quoteId: { type: string }
                artifacts: { type: array, items: { type: object } }
      responses:
        '202': { description: Accepted }
  /attribution/disputes:
    post:
      summary: Open a dispute for a quote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quoteId: { type: string }
                reason: { type: string }
                actor: { type: string }
      responses:
        '202': { description: Accepted }
  /conversations:
    post:
      summary: Create a conversation
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationCreateRequest'
      responses:
        '200':
          description: Created conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
  /conversations/{conversation_id}:
    get:
      summary: Retrieve a conversation
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
    post:
      summary: Update a conversation
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationUpdateRequest'
      responses:
        '200':
          description: Updated conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
    delete:
      summary: Delete a conversation
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Deletion result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDeleteResponse'
  /conversations/{conversation_id}/items:
    get:
      summary: List conversation items
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
        - in: query
          name: after
          schema: { type: string }
        - in: query
          name: include
          schema:
            type: array
            items: { type: string }
          style: form
          explode: false
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Conversation items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemList'
    post:
      summary: Create conversation items
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
        - in: query
          name: include
          schema:
            type: array
            items: { type: string }
          style: form
          explode: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationItemsCreateRequest'
      responses:
        '200':
          description: Added conversation items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItemList'
  /conversations/{conversation_id}/items/{item_id}:
    get:
      summary: Retrieve a conversation item
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
        - in: path
          name: item_id
          required: true
          schema: { type: string }
        - in: query
          name: include
          schema:
            type: array
            items: { type: string }
          style: form
          explode: false
      responses:
        '200':
          description: Conversation item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationItem'
    delete:
      summary: Delete a conversation item
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema: { type: string }
        - in: path
          name: item_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Updated conversation after deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
